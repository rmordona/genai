cmake_minimum_required(VERSION 3.5)
project(Genai)

# Set the C++ standard to C++17
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_OSX_BUNDLE OFF)

# Add the C++ source files
set(SOURCES
      src/embeddings.cpp
      src/tokenmodel.cpp
      src/operators.cpp
      src/transformer.cpp
      src/topology.cpp
      src/model.cpp
      src/distributed.cpp
      src/genai.cpp
)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -fopenmp -shared -fPIC -Wall")
cmake_policy(SET CMP0057 NEW)

# Set the path to the GCC compiler
set(CMAKE_C_COMPILER /usr/local/bin/gcc-13)
set(CMAKE_CXX_COMPILER /usr/local/bin/g++-13)


# Find Python libraries and headers
find_package(Python REQUIRED COMPONENTS Interpreter Development)
find_package(pybind11 REQUIRED)

# Set the path to each third-party library
set(OPENMPI_DIR,   "/usr/local/Cellar/open-mpi/4.1.5")
set(OPENBLAS_DIR,  "/usr/local/Cellar/openblas/0.3.23")
set(PYBIND11_DIR,  "/usr/local/Cellar/pybind11/2.11.1")
set(FMT_DIR,       "/usr/local/Cellar/fmt/10.0.0")
set(SPDLOG_DIR,    "/usr/local/Cellar/spdlog/1.12.0")
set(SQLITE_DIR,    "/usr/local/opt/sqlite")
set(OPENSSL_DIR,   "/usr/local/Cellar/openssl@3/3.1.1_1")
set(UTF8CPP_DIR,   "/usr/local/Cellar/utf8cpp/3.2.3")
set(ZEROMQ_DIR,    "/usr/local/Cellar/zeromq/4.3.4")
set(MEMCACHED_DIR, "/usr/local/Cellar/libmemcached/1.0.18_2")

# Create the Python module
pybind11_add_module(genai ${SOURCES})

# Add the include directories of the third-party libraries
include_directories(
     src/include
     /usr/local/pkg/homebrew/lib/python3.7/site-packages/pybind11/include
     /usr/local/Cellar/gcc/13.1.0/lib/gcc/current/gcc/x86_64-apple-darwin22/13/include
     /usr/local/Cellar/eigen/3.4.0_1/include/eigen3
     /usr/local/Cellar/open-mpi/4.1.5/include
     /usr/local/Cellar/openblas/0.3.23/include
     /usr/local/Cellar/pybind11/2.11.1/include
     /usr/local/Cellar/fmt/10.0.0/include
     /usr/local/Cellar/spdlog/1.12.0/include
     /usr/local/opt/sqlite/include
     /usr/local/Cellar/openssl@3/3.1.1_1/include
     /usr/local/Cellar/utf8cpp/3.2.3/include
     /usr/local/Cellar/zeromq/4.3.4/include
     /usr/local/Cellar/libmemcached/1.0.18_2/include
)



# Link against the required libraries
#target_link_libraries(genai PRIVATE
#    ${OPENMPI_DIR}/lib
#    ${OPENBLAS_DIR}/lib/libblas.dylib
#    ${PYBIND11_DIR}/lib
#    ${FMT_DIR}/lib
#    ${SPDLOG_DIR}/lib
#    ${SQLITE_DIR}/lib
#    ${OPENSSL_DIR}/lib
#    ${UTF8CPP_DIR}/lib
#    ${ZEROMQ_DIR}/lib
#    ${MEMCACHED_DIR}/lib
#)

find_library(OPENMPI_LIB NAMES mpi PATHS ${OPENMPI_DIR}/lib)
find_library(OPENBLAS_LIB NAMES cblas PATHS ${OPENBLAS_DIR}/lib)
find_library(PYBIND11_LIB NAMES pybind11 PATHS ${PYBIND11_DIR}/lib)
find_library(FMT_LIB NAMES fmt PATHS ${FMT_DIR}/lib)
find_library(SPDLOG_LIB NAMES spdlog PATHS ${SPDLOG_DIR}/lib)
find_library(SQLITE_LIB NAMES sqlite3 PATHS ${SQLITE_DIR}/lib)
find_library(OPENSSL_LIB NAMES ssl crypto PATHS ${OPENSSL_DIR}/lib)
find_library(UTF8CPP_LIB NAMES utf8cpp PATHS ${UTF8CPP_DIR}/lib)
find_library(ZEROMQ_LIB NAMES zmq PATHS ${ZEROMQ_DIR}/lib)
find_library(MEMCACHED_LIB NAMES memcached PATHS ${MEMCACHED_DIR}/lib)

#find_library(OPENMPI_LIB NAMES mpi PATHS /usr/local/Cellar/open-mpi/4.1.5/lib)
#find_library(OPENBLAS_LIB NAMES cblas PATHS /usr/local/Cellar/openblas/0.3.23/lib)
#find_library(PYBIND11_LIB NAMES pybind11 PATHS /usr/local/Cellar/pybind11/2.11.1/lib)
#find_library(FMT_LIB NAMES fmt PATHS /usr/local/Cellar/fmt/10.0.0/lib)
#find_library(SPDLOG_LIB NAMES spdlog PATHS /usr/local/Cellar/spdlog/1.12.0/lib)
#find_library(SQLITE_LIB NAMES sqlite3 PATHS /usr/local/opt/sqlite/lib)
#find_library(OPENSSL_LIB NAMES ssl crypto PATHS /usr/local/Cellar/openssl@3/3.1.1_1/lib)
#find_library(UTF8CPP_LIB NAMES utf8cpp PATHS /usr/local/Cellar/utf8cpp/3.2.3/lib)
#find_library(ZEROMQ_LIB NAMES zmq PATHS /usr/local/Cellar/zeromq/4.3.4/lib)
#find_library(MEMCACHED_LIB NAMES memcached PATHS /usr/local/Cellar/libmemcached/1.0.18_2/lib)

# Link against the required libraries
#target_link_libraries(genai PRIVATE -lcblas -lmpi -lzmq -lmemcached -lssl -lcrypto -lsqlite3 -lfmt)
target_link_libraries(genai PRIVATE 
    ${OPENMPI_LIB}
    ${OPENBLAS_LIB}
    ${PYBIND11_LIB}
    ${FMT_LIB}
    ${SPDLOG_LIB}
    ${SQLITE_LIB}
    ${OPENSSL_LIB}
    ${UTF8CPP_LIB}
    ${ZEROMQ_LIB}
    ${MEMCACHED_LIB}
)

# Add include directories for third-party libraries
#target_include_directories(genai PRIVATE
#     ${OPENMPI_DIR}/include
#     ${OPENBLAS_DIR}/include
#     ${PYBIND11_DIR}/include
#     ${FMT_DIR}/include
#     ${SPDLOG_DIR}/include
#     ${SQLITE_DIR}/include
#     ${OPENSSL_DIR}/include
#     ${UTF8CPP_DIR}/include
#     ${ZEROMQ_DIR}/include
#     ${MEMCACHED_DIR}/include
#)

# Add your sources and create the executable or module
# add_library(genai MODULE ${SOURCES})

target_compile_options(genai PRIVATE -fopenmp -Wall -fpermissive -fPIC -shared -mavx -mfma -DEIGEN_USE_BLAS -DFMT_HEADER_ONLY
                -DENABLE_DEBUG -DENABLE_TRACE -DENABLE_WARNING -DENABLE_INFO -DENABLE_ERROR -DERROR_CRITICAL -DCMAKE_OSX_BUNDLE=OFF)

# Set the module suffix
#set_target_properties(genai PROPERTIES SUFFIX ".so")
